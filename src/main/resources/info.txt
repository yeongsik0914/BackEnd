JPA 사용을 위한 환경 구성
1. H2 DataBase : 테스트 환경에서 많이 사용. ==> Oracle (서비스 환경)
	- 라이브러리 추가 : build.gradle 
==================================================================	
Transaction (트랜잭션) : 일 (작업) 을 처리하는 최소단위

- 트랜잭션이 시작되면 트랜잭션 완료까지 Lock 이 걸림.
- 트랜잭션이 발생되면 SQL Log에 모두 기록이 됨.
- DML 문에서 트랜잭션이 발생, (Insert, Update, Delete)
- 트랜잭션이 발생되고 commit 되기 전까지는 RAM에만 적용
- rollback (트랜잭션 발생 시점으로 되돌림)
- commit;
- Oracle Insert, Update, Delete 구문이 발생되면 자동으로 트랜잭션시작
    - commit;
- MSSQL, MySQL : 자동 커밋 트랜잭션 (statement, preparedStatement)
- 백업 시점이 아니라 오류가 발생된 시점으로 되돌릴 수 있다.
- All or Noting : 되면 전부 완료 되게 하거나 아니면 원점으로 되돌려 줘야한다.
===================================================================

Service 클래스 : 비즈니스 로직을 처리함.
	- 규모가 큰 사이트에서 비즈니스 로직을 간략하게 처리할 수 있다.
	- 유지보수가 빈번한 경우 유지 보수를 쉽게 구현할 수 있다.
	- 보안을 강화할 수 있다.

Client ===> Controller ===> Service (비즈니스 로직처리, DTO, DAO) ===> DAO ===> DB  






//Spring Framework를 사용한 폼 태그 내의 유효성 검사

1. 라이브러리 등록 :
	builde.gradle 에 등록
		//Spring 에서 제공해주는 유효성 검사 라이브러리 : form에서 빈값이나 글자수 제한
		implementation 'org.springframework.boot:spring-boot-starter-validation'

2. 유효성 검사 클래스를 생성 (Questionform.java) , @NotEmpty (message="오류메세지")
	@Getter
	@Setter
	
	유효성 검사 필드 : subject, content
	
	
	
STS에서 포트가 충돌나서 실행이 안되는 경우
1. 관리자 권한의 명령프롬포트로 실행
2. netstat -nao 	: 열려있는 포트의 PID 확인 ( PID : 프로세스(메모리의 로드된 프로그램)의 고유번호 )	
3. taskkill /f /pid pid번호


페이징 처리 : 스프링에서는 JPA에서 제공해주는 객체를 사용
	- 스프링에서는 페이징을 처리하기 위한 별도의 라이브러리가 필요없다.
	- 기본적으로 JPA 페이징 처리를 위한 객체가 존재한다.
	- Page
	- PageRequest
	- Pageable
	
	
	
2월 14일	<실습>

1. 부트스트랩 import
2. layout.html <== 공통으로 적용되는 부분을 뽑아내서 처리, list.html, detail.html
3. 상단의 NavBar 를 생성, 부트스트랩의 자바스크립트 처리
4. list.html 에 페이징 처리(10개 레코드), 날짜를 기준으로 desc, 번호를 처리 출력
5. 유효성 체크 : name, pass, email 에 값을 넣지 않을 경우 오류메세지 출력, 값을 모두 넣었을 때 등록
	유효성은 insert
	








	